apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  replicas: 1
  selector:
    matchLabels:
      run: apache
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: apache
    spec:
      containers:
      - image: docker.io/timharms/microservice-kubernetes-demo-apache:latest
        name: apache
        ports:
        - containerPort: 80
        resources: {}
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: apache
  name: apache
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: apache
  type: LoadBalancer
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: categoryservice
  name: categoryservice
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: categoryservice
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-kompose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/local-dev-net: "true"
        io.kompose.service: categoryservice
    spec:
      containers:
        - image: docker.io/timharms/hska-vis-legacy-categoryservice:latest
          name: categoryservice
          ports:
            - containerPort: 8081
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: categoryservice
  name: categoryservice
spec:
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
  selector:
    io.kompose.service: categoryservice
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: productservice
  name: productservice
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: productservice
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-kompose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/local-dev-net: "true"
        io.kompose.service: productservice
    spec:
      containers:
        - image: docker.io/timharms/hska-vis-legacy-productservice:latest
          name: productservice
          ports:
            - containerPort: 8082
          resources: {}
      restartPolicy: Always
status: {}

---
 
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: productservice
  name: productservice
spec:
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
  selector:
    io.kompose.service: productservice
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: legacywebshop
  name: legacywebshop
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: legacywebshop
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-kompose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/local-dev-net: "true"
        io.kompose.service: legacywebshop
    spec:
      containers:
        - image: docker.io/timharms/hska-vis-legacy-legacywebshop:latest
          name: legacywebshop
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: legacywebshop
  name: legacywebshop
spec:
  ports:
    - name: "8888"
      port: 8888
      targetPort: 8080
  selector:
    io.kompose.service: legacywebshop
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: web-shop-db-image
  name: web-shop-db-image
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: web-shop-db-image
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose-kompose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/local-dev-net: "true"
        io.kompose.service: web-shop-db-image
    spec:
      containers:
        - env:
            - name: MYSQL_DATABASE
              value: webshop
            - name: MYSQL_PASSWORD
              value: 240b2c6d58ff2ce2f508b49f
            - name: MYSQL_ROOT_PASSWORD
              value: c8de110f37300a53a971749
            - name: MYSQL_USER
              value: webshopuser
          image: docker.io/timharms/hska-vis-legacy-web-shop-db-image:latest
          name: web-shop-db-image
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: web-shop-db-image-claim0
      restartPolicy: Always
      volumes:
        - name: web-shop-db-image-claim0
          persistentVolumeClaim:
            claimName: web-shop-db-image-claim0
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose-kompose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: web-shop-db-image
  name: web-shop-db-image
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: web-shop-db-image
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: web-shop-db-image-claim0
  name: web-shop-db-image-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: local-dev-net
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/local-dev-net: "true"
  podSelector:
    matchLabels:
      io.kompose.network/local-dev-net: "true"
